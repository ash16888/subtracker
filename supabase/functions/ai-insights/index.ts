// Follow this setup guide to integrate the Deno language server with your editor:
// https://deno.land/manual/getting_started/setup_your_environment
// This enables autocomplete, go to definition, etc.

// Setup type definitions for built-in Supabase Runtime APIs
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    )

    const { data: { user } } = await supabaseClient.auth.getUser()
    if (!user) {
      throw new Error('Unauthorized')
    }

    const { subscriptions } = await req.json()

    // –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:

    // –í–ê–†–ò–ê–ù–¢ 1: OpenAI GPT-4
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'o3',
        messages: [
          {
            role: 'user',
            content: generatePrompt(subscriptions)
          }
        ],
        max_completion_tokens: 10000,
        reasoning_effort: 'medium'
      })
    })


    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.text()
      console.error('OpenAI API error:', openaiResponse.status, errorData)
      throw new Error(`OpenAI API error: ${openaiResponse.status} - ${errorData}`)
    }

    const aiResult = await openaiResponse.json()
    
    console.log('OpenAI API response status:', openaiResponse.status)
    console.log('Full AI result:', JSON.stringify(aiResult, null, 2))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è o4-mini
    let content = null
    const choice = aiResult.choices?.[0]
    const message = choice?.message
    
    console.log('Finish reason:', choice?.finish_reason)
    console.log('Usage details:', JSON.stringify(aiResult.usage, null, 2))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫–∞–∑ –æ—Ç –º–æ–¥–µ–ª–∏
    if (message?.refusal) {
      console.error('Model refused to answer:', message.refusal)
      throw new Error(`Model refused: ${message.refusal}`)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º finish_reason –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (choice?.finish_reason === 'length') {
      console.error('Response was cut off due to token limit')
      throw new Error('Response truncated due to token limit - try reducing input size')
    }
    
    if (message?.content) {
      content = message.content
    } else if (choice?.text) {
      content = choice.text
    } else if (aiResult.content) {
      content = aiResult.content
    } else if (aiResult.text) {
      content = aiResult.text
    }
    
    if (!content) {
      console.error('No content found in AI response. Available keys:', Object.keys(aiResult))
      if (choice) {
        console.error('Choice structure:', Object.keys(choice))
        if (message) {
          console.error('Message structure:', Object.keys(message))
          console.error('Message content:', message.content)
          console.error('Message refusal:', message.refusal)
        }
      }
      throw new Error('Invalid AI response format - no content found')
    }
    
    console.log('Raw AI response:', String(content).substring(0, 500) + '...')
    
    const insights = parseAIResponse(String(content))

    return new Response(
      JSON.stringify({ insights, generatedAt: new Date() }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
    )
  }
})

function generatePrompt(subscriptions: Record<string, unknown>[]) {
  const totalMonthly = subscriptions.reduce((sum, sub) => {
    const amount = Number(sub.amount) || 0
    return sum + (sub.billing_period === 'yearly' ? amount / 12 : amount)
  }, 0)

  const categories = [...new Set(subscriptions.map(sub => sub.category).filter(Boolean))]

  return `
–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –≤–∏–¥–µ —Å–≤—è–∑–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –≤–∫–ª—é—á–∏–≤ –≤ –Ω–µ–≥–æ –≤—Å–µ –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–ü–û–î–ü–ò–°–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
${subscriptions.map(sub => `
üîπ ${sub.name}: ${sub.amount} ${sub.currency}/${sub.billing_period}
   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${sub.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
   –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ${sub.next_payment_date}
`).join('\n')}

–û–ë–©–ê–Ø –°–£–ú–ú–ê –í –ú–ï–°–Ø–¶: ${Math.round(totalMonthly)} ‚ÇΩ
–ö–ê–¢–ï–ì–û–†–ò–ò: ${categories.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
–ù–∞–ø–∏—à–∏ —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:

1. –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ò –ê–ù–ê–õ–ò–ó –ò–ù–¢–ï–†–ï–°–û–í (1-2 –∞–±–∑–∞—Ü–∞)
   - –ü–æ—Ö–≤–∞–ª–∏ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–º–µ—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
   - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–æ–∫
   - –ù–µ–Ω–∞–≤—è–∑—á–∏–≤–æ –æ—Ç–º–µ—Ç—å –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ä–∞—Å—Ö–æ–¥–æ–≤

2. –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó (2-3 –∞–±–∑–∞—Ü–∞)
   - –û—Ä–≥–∞–Ω–∏—á–Ω–æ –≤–∫–ª—é—á–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —ç–∫–æ–Ω–æ–º–∏–∏
   - –û—Ç–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
   - –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
   - –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ –≥–¥–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ

3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï (1-2 –∞–±–∑–∞—Ü–∞)
   - –ë–ª–æ–∫ "–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –±—ã–ª–∏ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã" —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
   - –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
   - –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "analysis": "–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –≤–∏–¥–µ —Å–≤—è–∑–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –∞–±–∑–∞—Ü–∞–º–∏",
  "totalSavings": —á–∏—Å–ª–æ_–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π_—ç–∫–æ–Ω–æ–º–∏–∏_–≤_–º–µ—Å—è—Ü,
  "keyRecommendations": ["–∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç 1", "–∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç 2", "–∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç 3"]
}

–¢–û–ù: –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π, –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –¥—Ä—É–≥. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤. –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∏–∑–±–µ–≥–∞–π —Å–ø–∏—Å–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ markdown –±–ª–æ–∫–æ–≤.
  `
}

function parseAIResponse(response: string) {
  try {
    // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –±–ª–æ–∫–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let cleanResponse = response.trim()
    
    // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ ```json –∏ ```
    if (cleanResponse.startsWith('```json')) {
      cleanResponse = cleanResponse.replace(/^```json\s*/, '').replace(/\s*```$/, '')
    } else if (cleanResponse.startsWith('```')) {
      cleanResponse = cleanResponse.replace(/^```\s*/, '').replace(/\s*```$/, '')
    }
    
    // –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    cleanResponse = cleanResponse.trim()
    
    console.log('Cleaned AI response:', cleanResponse.substring(0, 200) + '...')
    
    const aiResult = JSON.parse(cleanResponse)
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å—Ç–∞—Ä—ã–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    const analysisInsight = {
      id: `ai-analysis-${Date.now()}`,
      type: 'analysis',
      priority: 'high',
      title: 'üìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫',
      description: aiResult.analysis || '–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫',
      actionItems: aiResult.keyRecommendations || [],
      potentialSavings: aiResult.totalSavings || 0,
      affectedSubscriptions: [],
      createdAt: new Date()
    }
    
    return [analysisInsight]
  } catch (error) {
    console.error('Failed to parse AI response:', error)
    console.error('Raw response:', response)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∏–Ω—Å–∞–π—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    return [{
      id: `fallback-${Date.now()}`,
      type: 'warning',
      priority: 'medium',
      title: '–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      actionItems: ['–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç'],
      createdAt: new Date()
    }]
  }
}

/* To invoke locally:

  1. Run `supabase start` (see: https://supabase.com/docs/reference/cli/supabase-start)
  2. Make an HTTP request:

  curl -i --location --request POST 'http://127.0.0.1:54321/functions/v1/ai-insights' \
    --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
    --header 'Content-Type: application/json' \
    --data '{"name":"Functions"}'

*/
